/* Generated by AN DISI Unibo */ 
package it.unibo.transporttrolley

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024

class Transporttrolley ( name: String, scope: CoroutineScope, isconfined: Boolean=false, isdynamic: Boolean=false ) : 
          ActorBasicFsm( name, scope, confined=isconfined, dynamically=isdynamic ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outblue("TRANSPORTTROLLEY:  attivo!")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="s1", cond=doswitch() )
				}	 
				state("s1") { //this:State
					action { //it:State
						CommUtils.outblue("TRANSPORTTROLLEY:  attendo messaggi da CStorage.")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t08",targetState="carica",cond=whenRequest("takecharge"))
				}	 
				state("carica") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("takecharge(NO_PARAM)"), Term.createTerm("takecharge(NO_PARAM)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								CommUtils.outblue("TRANSPORTTROLLEY: Prendo il carico. Vado in COLDROOM. ")
								answer("takecharge", "chargetaken", "chargetaken(NO_PARAM)"   )  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
				 	 		stateTimer = TimerActor("timer_carica", 
				 	 					  scope, context!!, "local_tout_"+name+"_carica", 3000.toLong() )  //OCT2023
					}	 	 
					 transition(edgeName="wait9",targetState="raggiuntoCR",cond=whenTimeout("local_tout_"+name+"_carica"))   
				}	 
				state("raggiuntoCR") { //this:State
					action { //it:State
						CommUtils.outblue("TRANSPORTTROLLEY: ho caricato il frigo.")
						forward("liberoTT", "liberoTT(NO_PARAM)" ,"coldstorageservice" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t110",targetState="carica",cond=whenRequest("takecharge"))
					transition(edgeName="t111",targetState="vaiCasa",cond=whenDispatch("goHome"))
				}	 
				state("vaiCasa") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("goHome(NO_PARAM)"), Term.createTerm("goHome(NO_PARAM)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								CommUtils.outblue("TRANSPORTTROLLEY: vado in HOME.")
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="s1", cond=doswitch() )
				}	 
			}
		}
} 
