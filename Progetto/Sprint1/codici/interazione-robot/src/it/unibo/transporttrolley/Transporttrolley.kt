/* Generated by AN DISI Unibo */ 
package it.unibo.transporttrolley

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024

class Transporttrolley ( name: String, scope: CoroutineScope, isconfined: Boolean=false, isdynamic: Boolean=false ) : 
          ActorBasicFsm( name, scope, confined=isconfined, dynamically=isdynamic ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		 var lastState: String="" 
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outyellow("$name | init e engage basicrobot")
						request("engage", "engage(transporttrolley,330)" ,"basicrobot" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="engaged",cond=whenReply("engagedone"))
				}	 
				state("engaged") { //this:State
					action { //it:State
						CommUtils.outyellow("$name | basicrobot engaged")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="atHome", cond=doswitch() )
				}	 
				state("atHome") { //this:State
					action { //it:State
						 lastState = "atHome"  
						CommUtils.outyellow("$name | basicrobot at Home")
						request("moverobot", "moverobot(0,0)" ,"basicrobot" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t01",targetState="goingatIndoor",cond=whenReply("moverobotdone"))
				}	 
				state("goingatIndoor") { //this:State
					action { //it:State
						CommUtils.outyellow("$name | vado all'INDOOR")
						request("moverobot", "moverobot(0,4)" ,"basicrobot" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="atIndoor", cond=doswitch() )
				}	 
				state("atIndoor") { //this:State
					action { //it:State
						 lastState = "atIndoor"  
						CommUtils.outyellow("$name | sono in INDOOR")
						CommUtils.outyellow("$name | carico il cibo")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
				 	 		stateTimer = TimerActor("timer_atIndoor", 
				 	 					  scope, context!!, "local_tout_"+name+"_atIndoor", 30.toLong() )  //OCT2023
					}	 	 
					 transition(edgeName="t2",targetState="loadDone",cond=whenTimeout("local_tout_"+name+"_atIndoor"))   
				}	 
				state("loadDone") { //this:State
					action { //it:State
						CommUtils.outyellow("$name | cibo caricato")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="goingColdroom", cond=doswitch() )
				}	 
				state("goingColdroom") { //this:State
					action { //it:State
						 lastState = "goingColdroom"  
						CommUtils.outyellow("$name | vado verso la cold room")
						request("moverobot", "moverobot(4,3)" ,"basicrobot" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t03",targetState="atColdroom",cond=whenReply("moverobotdone"))
				}	 
				state("atColdroom") { //this:State
					action { //it:State
						 lastState = "atColdroom"  
						CommUtils.outyellow("$name | sono in Cold Room")
						request("moverobot", "moverobot(0,0)" ,"basicrobot" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
				 	 		stateTimer = TimerActor("timer_atColdroom", 
				 	 					  scope, context!!, "local_tout_"+name+"_atColdroom", 100.toLong() )  //OCT2023
					}	 	 
					 transition(edgeName="t04",targetState="goinHome",cond=whenTimeout("local_tout_"+name+"_atColdroom"))   
				}	 
				state("goinHome") { //this:State
					action { //it:State
						CommUtils.outyellow("$name | sono in HOME")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="quit", cond=doswitch() )
				}	 
				state("quit") { //this:State
					action { //it:State
						forward("disengage", "disengage(transporttrolley)" ,"basicrobot" ) 
						 System.exit(0)  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
			}
		}
} 
