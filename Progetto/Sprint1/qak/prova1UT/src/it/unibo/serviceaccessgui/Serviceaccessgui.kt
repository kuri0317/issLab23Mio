/* Generated by AN DISI Unibo */ 
package it.unibo.serviceaccessgui

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024

class Serviceaccessgui ( name: String, scope: CoroutineScope, isconfined: Boolean=false, isdynamic: Boolean=false ) : 
          ActorBasicFsm( name, scope, confined=isconfined, dynamically=isdynamic ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		 
				var Ticket= " "
				var Tvalido= false 
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outyellow("ACCESSGUI : attivo.")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="s1", cond=doswitch() )
				}	 
				state("s1") { //this:State
					action { //it:State
						CommUtils.outyellow("ACCESSGUI : chiedo un ticket.")
						request("depositRequest", "depositRequest(Ticket)" ,"coldstorageservice" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t022",targetState="indoor",cond=whenReply("accept"))
					transition(edgeName="t023",targetState="riprova",cond=whenReply("reject"))
				}	 
				state("riprova") { //this:State
					action { //it:State
						CommUtils.outred("ACCESSGUI: rifiutato")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
				 	 		stateTimer = TimerActor("timer_riprova", 
				 	 					  scope, context!!, "local_tout_"+name+"_riprova", 3000.toLong() )  //OCT2023
					}	 	 
					 transition(edgeName="wait24",targetState="s1",cond=whenTimeout("local_tout_"+name+"_riprova"))   
				}	 
				state("indoor") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("accept(TICKET)"), Term.createTerm("accept(TICKET)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 Ticket = payloadArg(0) 
								CommUtils.outgreen("ACCESSGUI: ticket accettato, Ticket : $Ticket ")
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
				 	 		stateTimer = TimerActor("timer_indoor", 
				 	 					  scope, context!!, "local_tout_"+name+"_indoor", 3000.toLong() )  //OCT2023
					}	 	 
					 transition(edgeName="t125",targetState="giveticket",cond=whenTimeout("local_tout_"+name+"_indoor"))   
				}	 
				state("giveticket") { //this:State
					action { //it:State
						CommUtils.outyellow("ACCESSGUI: consegno ticket $Ticket")
						
								    var  Duration= Math.floor(Math.random() *7500).toLong()
								    delay(Duration)
						request("checkmyticket", "checkmyticket($Ticket)" ,"coldstorageservice" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t226",targetState="checkresponse",cond=whenReply("ticketcheck"))
				}	 
				state("checkresponse") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("ticketcheck(BOOL)"), Term.createTerm("ticketcheck(BOOL)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 Tvalido = payloadArg(0).toBoolean()  
						}
						CommUtils.outyellow("ACCESSGUI: ticket accettato? $Tvalido")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="s1", cond=doswitchGuarded({!Tvalido 
					}) )
					transition( edgeName="goto",targetState="unloading", cond=doswitchGuarded({! (!Tvalido 
					) }) )
				}	 
				state("unloading") { //this:State
					action { //it:State
						CommUtils.outyellow("ACCESSGUI: effettua scarico!")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t327",targetState="truck",cond=whenDispatch("truckDriver"))
				}	 
				state("truck") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("truckDriver(NO_PARAM)"), Term.createTerm("truckDriver(NO_PARAM)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								CommUtils.outyellow("ACCESSGUI: ho finito vado via!")
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
				 	 		stateTimer = TimerActor("timer_truck", 
				 	 					  scope, context!!, "local_tout_"+name+"_truck", 6000.toLong() )  //OCT2023
					}	 	 
					 transition(edgeName="t328",targetState="s1",cond=whenTimeout("local_tout_"+name+"_truck"))   
				}	 
			}
		}
} 
