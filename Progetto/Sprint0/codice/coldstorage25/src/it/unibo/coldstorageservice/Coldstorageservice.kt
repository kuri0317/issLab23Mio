/* Generated by AN DISI Unibo */ 
package it.unibo.coldstorageservice

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024

class Coldstorageservice ( name: String, scope: CoroutineScope, isconfined: Boolean=false, isdynamic: Boolean=false ) : 
          ActorBasicFsm( name, scope, confined=isconfined, dynamically=isdynamic ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		
				var TICKETTIME =15000;
				var Token= "_" 
				var InitialToken ="T"
				var Ticket =""
				var Sequenza =0 
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outcyan("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						CommUtils.outblue("COLDSTORAGE:  ticket time = $TICKETTIME")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="s1", cond=doswitch() )
				}	 
				state("s1") { //this:State
					action { //it:State
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="checktheticket",cond=whenRequest("checkmyticket"))
					transition(edgeName="t01",targetState="check",cond=whenRequest("depositRequest"))
				}	 
				state("checktheticket") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("checkmyticket(TICKET)"), Term.createTerm("checkmyticket(TICKETTIME)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
													var Ticket =payloadArg(0)
													var Ticketvalid= false ;
													var StartTime= Ticket.split( Token, ignoreCase= true, limit=0).get(1).toInt()
													var Now = java.util.Date().getTime()/1000
													if(Now<StartTime +TICKETTIME){ //se è valido
														Ticketvalid = true
													}	
													
								CommUtils.outmagenta("COLDSTORAGE : ticket valido? $Ticketvalid")
								answer("checkmyticket", "ticketcheck", "ticketcheck($Ticketvalid)"   )  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="s1", cond=doswitch() )
				}	 
				state("check") { //this:State
					action { //it:State
						CommUtils.outmagenta("COLDSTORAGE : chiedo il peso ")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="s1", cond=doswitch() )
				}	 
			}
		}
} 
