/* Generated by AN DISI Unibo */ 
package it.unibo.led

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024

class Led ( name: String, scope: CoroutineScope, isconfined: Boolean=false, isdynamic: Boolean=false ) : 
          ActorBasicFsm( name, scope, confined=isconfined, dynamically=isdynamic ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		val ledgui = main.java.Led()
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outyellow("LED in s0 ")
						 
						           ledgui.createGUI()
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="s1", cond=doswitch() )
				}	 
				state("s1") { //this:State
					action { //it:State
						CommUtils.outyellow(" led attende messaggi ")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="blinks",cond=whenDispatch("inmoto"))
					transition(edgeName="t01",targetState="accendi",cond=whenDispatch("ledOn"))
					transition(edgeName="t02",targetState="spegni",cond=whenDispatch("ledOff"))
				}	 
				state("accendi") { //this:State
					action { //it:State
						CommUtils.outgreen("LED : Ricevuto ledOn! Cambio stato")
						
									ledgui.changeLed(2)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t13",targetState="blinks",cond=whenDispatch("inmoto"))
					transition(edgeName="t14",targetState="spegni",cond=whenDispatch("ledOff"))
				}	 
				state("blinks") { //this:State
					action { //it:State
						CommUtils.outgreen("LED : Ricevuto inmoto! Cambio stato")
						
									ledgui.changeLed(3)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t25",targetState="accendi",cond=whenDispatch("ledOn"))
					transition(edgeName="t26",targetState="spegni",cond=whenDispatch("ledOff"))
				}	 
				state("spegni") { //this:State
					action { //it:State
						CommUtils.outgreen("LED : Ricevuto ledOff! Spengo")
						
									ledgui.changeLed(1)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t37",targetState="blinks",cond=whenDispatch("inmoto"))
					transition(edgeName="t38",targetState="accendi",cond=whenDispatch("ledOn"))
				}	 
			}
		}
} 
