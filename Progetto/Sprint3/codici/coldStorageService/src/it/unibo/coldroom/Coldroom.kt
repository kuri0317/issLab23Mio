/* Generated by AN DISI Unibo */ 
package it.unibo.coldroom

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024

class Coldroom ( name: String, scope: CoroutineScope, isconfined: Boolean=false, isdynamic: Boolean=false ) : 
          ActorBasicFsm( name, scope, confined=isconfined, dynamically=isdynamic ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		
				var Peso = 0 	//spazio occupato dentro frigo
				var MAXW = 60	//peso massimo in frigo
				var FW= 15		//peso di ogni richiesta
				var P_alloc=0	//spazio prenotato
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outcyan("COLDROOM:  attivo, peso iniziale in frigo = $Peso")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="s1", cond=doswitch() )
				}	 
				state("s1") { //this:State
					action { //it:State
						CommUtils.outcyan("COLDROOM: aspetto richieste da CStorage.")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t010",targetState="controllaPeso",cond=whenRequest("fwrequest"))
					transition(edgeName="t011",targetState="s2",cond=whenRequest("load_CR"))
					transition(edgeName="t012",targetState="delete_Reservation",cond=whenRequest("delete_Reservation"))
					transition(edgeName="t013",targetState="sendWeight",cond=whenRequest("getCurrentWeight"))
				}	 
				state("sendWeight") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("getCurrentWeight(NO_PARAM)"), Term.createTerm("getCurrentWeight(NO_PARAM)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								CommUtils.outcyan("COLDROOM: invio peso corrente a SpringBoot $Peso")
								answer("getCurrentWeight", "currentWeight", "currentWeight($Peso)"   )  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="s1", cond=doswitch() )
				}	 
				state("delete_Reservation") { //this:State
					action { //it:State
						 P_alloc-=FW   
						CommUtils.outgreen("COLDROOM : Elimino prenotazione. Peso allocato in frigo: $P_alloc")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="s0", cond=doswitch() )
				}	 
				state("controllaPeso") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("fwrequest(NO_PARAM)"), Term.createTerm("fwrequest(NO_PARAM)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								if( Peso+ FW <= MAXW 
								 ){P_alloc+=FW  
								CommUtils.outgreen("COLDROOM : Spazio disponibile! Prenotazione avvenuta. Peso allocato in frigo: $P_alloc")
								answer("fwrequest", "fwYES", "fwYES(NO_PARAM)"   )  
								}
								if( Peso+ FW > MAXW 
								 ){CommUtils.outred("COLDROOM: non c'è spazio, rifiuta.")
								answer("fwrequest", "fwNO", "fwNO(NO_PARAM)"   )  
								}
								CommUtils.outcyan("COLDROOM : il Peso totale in frigo è: $Peso")
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="s1", cond=doswitch() )
				}	 
				state("s2") { //this:State
					action { //it:State
						 
									P_alloc-=FW  
									Peso= Peso+FW 
						CommUtils.outcyan("COLDROOM s2: Peso totale in frigo: $Peso e lo spazio allocato ora è: $P_alloc")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="s1", cond=doswitch() )
				}	 
			}
		}
} 
