/* Generated by AN DISI Unibo */ 
package it.unibo.transporttrolley

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024

class Transporttrolley ( name: String, scope: CoroutineScope, isconfined: Boolean=false, isdynamic: Boolean=false ) : 
          ActorBasicFsm( name, scope, confined=isconfined, dynamically=isdynamic ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		 var StatoRobo = ""  
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outblue("TRANSPORTTROLLEY:  attivo!")
						CommUtils.outblue("TRANSPORTTROLLEY:  engage basicrobot")
						request("engage", "engage(transporttrolley,305)" ,"basicrobot" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="s1", cond=doswitch() )
				}	 
				state("s1") { //this:State
					action { //it:State
						 StatoRobo = "Home"  
						forward("ledOff", "ledOff(NO_PARAM)" ,"led" ) 
						CommUtils.outblue("TRANSPORTTROLLEY: sono in HOME, attendo messaggi da CStorage.")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t014",targetState="goIndoor",cond=whenRequest("takecharge"))
					transition(edgeName="t015",targetState="quit",cond=whenRequest("quit"))
					transition(edgeName="t016",targetState="stopping",cond=whenEvent("stop"))
				}	 
				state("goIndoor") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("takecharge(NO_PARAM)"), Term.createTerm("takecharge(NO_PARAM)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								CommUtils.outblue("TRANSPORTTROLLEY: vado in INDOOR e prendo il carico. ")
								answer("takecharge", "chargetaken", "chargetaken(NO_PARAM)"   )  
						}
						 StatoRobo= "goIndoor"  
						forward("inmoto", "inmoto(NO_PARAM)" ,"led" ) 
						request("moverobot", "moverobot(0,4)" ,"basicrobot" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t117",targetState="carica",cond=whenReply("moverobotdone"))
					transition(edgeName="t118",targetState="stopping",cond=whenEvent("stop"))
				}	 
				state("carica") { //this:State
					action { //it:State
						 StatoRobo= "caricando"  
						
								println("TRANSPORTTROLLEY: sto prendendo il carico.")
							    var  Duration= Math.floor(Math.random() *200).toLong()
							    delay(Duration)
						CommUtils.outblue("TRANSPORTTROLLEY:dico al led di essere ON. ")
						forward("ledOn", "ledOn(NO_PARAM)" ,"led" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="caricando", cond=doswitch() )
				}	 
				state("caricando") { //this:State
					action { //it:State
						
								println("TRANSPORTTROLLEY: sto prendendo il carico.")
							    var  Duration= Math.floor(Math.random() *2500).toLong()
							    delay(Duration)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="caricato", cond=doswitch() )
				}	 
				state("caricato") { //this:State
					action { //it:State
						forward("inmoto", "inmoto(NO_PARAM)" ,"led" ) 
						 StatoRobo= "goCR"  
						CommUtils.outblue("TRANSPORTTROLLEY: vado verso COLDROOM")
						request("moverobot", "moverobot(4,3)" ,"basicrobot" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t219",targetState="raggiuntoCR",cond=whenReply("moverobotdone"))
					transition(edgeName="t220",targetState="stopping",cond=whenEvent("stop"))
				}	 
				state("raggiuntoCR") { //this:State
					action { //it:State
						 StatoRobo= "inCR"  
						
								println("TRANSPORTTROLLEY: sto prendendo il carico.")
							    var  Duration= Math.floor(Math.random() *200).toLong()
							    delay(Duration)
						CommUtils.outblue("TRANSPORTTROLLEY: dico al led di essere On.")
						forward("ledOn", "ledOn(NO_PARAM)" ,"led" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="caricafrigo", cond=doswitch() )
				}	 
				state("caricafrigo") { //this:State
					action { //it:State
						
								println("TRANSPORTTROLLEY: sto caricando il frigo.")
							    var  Duration= Math.floor(Math.random() *4500).toLong()
							    delay(Duration)			//tempo randomico per caricare il frigorifero
						CommUtils.outblue("TRANSPORTTROLLEY: ho caricato il frigo.")
						forward("liberoTT", "liberoTT(NO_PARAM)" ,"coldstorageservice" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t321",targetState="goIndoor",cond=whenRequest("takecharge"))
					transition(edgeName="t322",targetState="vaiCasa",cond=whenDispatch("goHome"))
					transition(edgeName="t323",targetState="quit",cond=whenRequest("quit"))
					transition(edgeName="t324",targetState="stopping",cond=whenEvent("stop"))
				}	 
				state("vaiCasa") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("goHome(NO_PARAM)"), Term.createTerm("goHome(NO_PARAM)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								CommUtils.outblue("TRANSPORTTROLLEY: vado in HOME.")
						}
						forward("inmoto", "inmoto(NO_PARAM)" ,"led" ) 
						 StatoRobo= "goHome"  
						request("moverobot", "moverobot(0,0)" ,"basicrobot" )  
						forward("setdirection", "dir(down)" ,"basicrobot" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t425",targetState="s1",cond=whenReply("moverobotdone"))
					transition(edgeName="t426",targetState="quit",cond=whenRequest("quit"))
					transition(edgeName="t427",targetState="stopping",cond=whenEvent("stop"))
				}	 
				state("stopping") { //this:State
					action { //it:State
						discardMessages = true
						delay(500)  
						forward("ledOn", "ledOn(NO_PARAM)" ,"led" ) 
						emit("alarm", "alarm(X)" ) 
						CommUtils.outblue("TRANSPORTTROLLEY: basicrobot ha incontrato un ostacolo")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t528",targetState="s1",cond=whenDispatchGuarded("resume",{ StatoRobo== "Home"  
					}))
					transition(edgeName="t529",targetState="goIndoor",cond=whenDispatchGuarded("resume",{ StatoRobo== "goIndoor"  
					}))
					transition(edgeName="t530",targetState="carica",cond=whenDispatchGuarded("resume",{ StatoRobo== "caricando"  
					}))
					transition(edgeName="t531",targetState="caricato",cond=whenDispatchGuarded("resume",{ StatoRobo== "goCR"  
					}))
					transition(edgeName="t532",targetState="raggiuntoCR",cond=whenDispatchGuarded("resume",{ StatoRobo== "inCR"  
					}))
					transition(edgeName="t533",targetState="vaiCasa",cond=whenDispatchGuarded("resume",{ StatoRobo== "goHome"  
					}))
				}	 
				state("quit") { //this:State
					action { //it:State
						
								    var  Duration= Math.floor(Math.random() *6000).toLong()
								    delay(Duration)
						forward("inmoto", "inmoto(NO_PARAM)" ,"led" ) 
						request("moverobot", "moverobot(0,0)" ,"basicrobot" )  
						forward("setdirection", "dir(down)" ,"basicrobot" ) 
						forward("disengage", "disengage(transporttrolley)" ,"basicrobot" ) 
						forward("ledOff", "ledOff(NO_PARAM)" ,"led" ) 
						CommUtils.outblue("TRANSPORTTROLLEY:  disengage basicrobot")
						 System.exit(0)  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
			}
		}
} 
