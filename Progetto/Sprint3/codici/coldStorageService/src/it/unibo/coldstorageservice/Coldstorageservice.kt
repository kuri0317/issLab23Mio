/* Generated by AN DISI Unibo */ 
package it.unibo.coldstorageservice

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024

class Coldstorageservice ( name: String, scope: CoroutineScope, isconfined: Boolean=false, isdynamic: Boolean=false ) : 
          ActorBasicFsm( name, scope, confined=isconfined, dynamically=isdynamic ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		
				var TICKETTIME =10;  //timer del ticket
				var Token= "_" 
				var InitialToken ="T"
				var Ticket =""
				var T_acc=0
				
				var busy = false 	//variabile che indica se il trolley è libero o occupato
				var valido = false	//variabile che indica la validità del ticket
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outmagenta("COLDSTORAGE: attivo")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="s1", cond=doswitch() )
				}	 
				state("s1") { //this:State
					action { //it:State
						CommUtils.outmagenta("COLDSTORAGE: attendo un messaggio.")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="check",cond=whenRequest("depositRequest"))
					transition(edgeName="t01",targetState="checktheticket",cond=whenRequest("checkmyticket"))
					transition(edgeName="t02",targetState="libera",cond=whenDispatch("liberoTT"))
					transition(edgeName="t03",targetState="esci",cond=whenRequest("quit"))
				}	 
				state("checktheticket") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("checkmyticket(TICKET)"), Term.createTerm("checkmyticket(TICKET)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
													valido = false
													var Ticket =payloadArg(0)
													var Ticketvalid= false ;
													var StartTime= Ticket.split( Token, ignoreCase= true, limit=0).get(1).toInt()
													var Now = java.util.Date().getTime()/1000
													if(Now<StartTime +TICKETTIME){ 					//se è valido
														Ticketvalid = true
														valido = true
													}	
								CommUtils.outred("COLDSTORAGE : controllo il ticket di SAGUI, ticket valido? $Ticketvalid")
								CommUtils.outred("COLDSTORAGE : now $Now < StartTime $StartTime + $TICKETTIME = $Ticketvalid")
								answer("checkmyticket", "ticketcheck", "$Ticketvalid"   )  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="svuotaAlloc", cond=doswitchGuarded({ !valido 
					}) )
					transition( edgeName="goto",targetState="taking", cond=doswitchGuarded({! ( !valido 
					) }) )
				}	 
				state("svuotaAlloc") { //this:State
					action { //it:State
						request("delete_Reservation", "delete_Reservation(NO_PARAM)" ,"coldroom" )  
						CommUtils.outmagenta("COLDSTORAGE : chiedo a coldroom di togliere la prenotazione.")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="s1", cond=doswitch() )
				}	 
				state("check") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("depositRequest(NO_PARAM)"), Term.createTerm("depositRequest(NO_PARAM)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								CommUtils.outmagenta("COLDSTORAGE : chiedo a coldroom se c'è spazio.")
								request("fwrequest", "fwrequest(NO_PARAM)" ,"coldroom" )  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t14",targetState="returnticket",cond=whenReply("fwYES"))
					transition(edgeName="t15",targetState="reject",cond=whenReply("fwNO"))
				}	 
				state("reject") { //this:State
					action { //it:State
						CommUtils.outred("COLDSTORAGE : non c'è spazio, richiesta rifiutata")
						answer("depositRequest", "reject", "reject(NO_PARAM)"   )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="s1", cond=doswitch() )
				}	 
				state("returnticket") { //this:State
					action { //it:State
						  Ticket = "T".plus(Token)
									var Now = java.util.Date().getTime()/1000
									
									Ticket = Ticket.plus( Now ).plus(Token).plus( T_acc)
									T_acc++
									
						CommUtils.outgreen("COLDSTORAGE : Consegno ticket, numero $T_acc")
						answer("depositRequest", "accept", "accept($Ticket)"   )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="s1", cond=doswitch() )
				}	 
				state("taking") { //this:State
					action { //it:State
						  busy=true  
						CommUtils.outmagenta("COLDSTORAGE: chiamo transporttrolley in INDOOR, busy= $busy")
						request("takecharge", "takecharge(NO_PARAM)" ,"transporttrolley" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t26",targetState="viaDriver",cond=whenReply("chargetaken"))
				}	 
				state("viaDriver") { //this:State
					action { //it:State
						CommUtils.outmagenta("COLDSTORAGE: truck driver può andare.")
						forward("truckDriver", "truckDriver(NO_PARAM)" ,"serviceaccesgui" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
				 	 		stateTimer = TimerActor("timer_viaDriver", 
				 	 					  scope, context!!, "local_tout_"+name+"_viaDriver", 3000.toLong() )  //OCT2023
					}	 	 
					 transition(edgeName="t27",targetState="riempi",cond=whenTimeout("local_tout_"+name+"_viaDriver"))   
				}	 
				state("riempi") { //this:State
					action { //it:State
						request("load_CR", "load_CR(NO_PARAM)" ,"coldroom" )  
						CommUtils.outmagenta("COLDSTORAGE: ColdRoom deve togliere l'allocazione e confermare lo spazio.")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
				 	 		stateTimer = TimerActor("timer_riempi", 
				 	 					  scope, context!!, "local_tout_"+name+"_riempi", 4000.toLong() )  //OCT2023
					}	 	 
					 transition(edgeName="t48",targetState="s1",cond=whenTimeout("local_tout_"+name+"_riempi"))   
				}	 
				state("libera") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("liberoTT(NO_PARAM)"), Term.createTerm("liberoTT(NO_PARAM)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 if(busy==true) busy=false  
								CommUtils.outmagenta("COLDSTORAGE: transporttrolley deve andare in HOME. busy= $busy")
								forward("goHome", "goHome(NO_PARAM)" ,"transporttrolley" ) 
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
				 	 		stateTimer = TimerActor("timer_libera", 
				 	 					  scope, context!!, "local_tout_"+name+"_libera", 6000.toLong() )  //OCT2023
					}	 	 
					 transition(edgeName="t49",targetState="s1",cond=whenTimeout("local_tout_"+name+"_libera"))   
				}	 
				state("esci") { //this:State
					action { //it:State
						CommUtils.outmagenta("COLDSTORAGE: transporttrolley chiudiamo.")
						request("quit", "quit(NO_PARAM)" ,"transporttrolley" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
			}
		}
} 
